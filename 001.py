# -*- coding: utf-8 -*-
"""инкрементальные сферы.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OSQe7ePU29sLiqdKrBo7hMkwzAk8SNtx
"""

import numpy as np
import matplotlib.pyplot as plt

class IncrementalSpheresClasterisator:

    def __init__(self, n_clusters):
        self.n_clusters = n_clusters


    def fit_predict(self, data):
        distances = []
        for i in range(data.shape[0]-1):
          for j in range(i+1, data.shape[0]):
            one, two = data[i], data[j]
            dist = np.linalg.norm(one - two)
            distances.append((i, j, dist))
        distances.sort(key=lambda arg:arg[2])
        print(distances)
        clusters = [[i] for i in range(data.shape[0])]
        print(clusters)
        def get_cluster_index(k):
          for ind, cl in enumerate(clusters):
            if k in cl:
              return ind
        for item in distances:
          first, second, distance = item
          c1, c2 = get_cluster_index(first), get_cluster_index(second)
          print(f'{first} ---> {c1}, {second}-->{c2}, d={distance}')
          if c1 == c2:
            continue
          clusters[c1] += clusters[c2]
          del clusters[c2]
          if len(clusters) == self.n_clusters:
            break
        labels = [get_cluster_index(i) for i in range(data.shape[0])]
        print(clusters)
        print(labels)
        return labels

clusterisator = IncrementalSpheresClasterisator(n_clusters=2)
labs=clusterisator.fit_predict(a)
a = np.array([[0, 0],[1, 1], [3, 4], [4, 4], [0, 2]])

plt.scatter(a[:, 0], a[:, 1], c=labs);

import pandas as pd
from sklearn.cluster import KMeans

df = pd.read_csv('data.csv')
df

X = df[[col for col in df.columns if col.startswith('q')]]
X

estimator1 = KMeans(n_clusters=3)

labels1 = estimator1.fit_predict(X)
labels1

for n, c in zip(df.name.values, labels1):
  print(f'{n:20} --> {c}')

from scipy.spatial.distance import pdist
from scipy.cluster import hierarchy

distance_matr = pdist(X)
distance_matr

Z = hierarchy.linkage(distance_matr, 'single')
plt.figure(figsize=(7, 7))
dn = hierarchy.dendrogram(Z, color_threshold=0.5, labels=df.name.values);

estimator2 = IncrementalSpheresClasterisator(n_clusters=3)
labels2 = estimator2.fit_predict(X)
labels2

from sklearn.manifold import TSNE

X_ = TSNE(n_components=2).fit_transform(X)
X_

plt.axis([-300, 300, -300, 300])
for i in range(X_.shape[0]):
  plt.text(X_[i, 0], X_[i, 1], df.name.values[i],
           color=plt.cm.nipy_spectral(labels2[i]/2.1));

from sklearn.datasets.samples_generator import make_blobs

X1, _ = make_blobs(n_samples=[10, 10], centers = [(-5, -5), (5, 5)], n_features=2, random_state=42)
plt.scatter(X1[:, 0], X1[:, 1]);

labels_ = IncrementalSpheresClasterisator(n_clusters=2).fit_predict(X1)
labels_

plt.scatter(X1[:, 0], X1[:, 1], c=labels_);

Z = hierarchy.linkage(pdist(X1), 'single')
plt.figure(figsize=(7, 7))
dn = hierarchy.dendrogram(Z, color_threshold=0.5);



